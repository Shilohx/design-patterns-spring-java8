package victor.training.oo.behavioral.command;

import java.util.Arrays;
import java.util.concurrent.CompletableFuture;

import org.jooq.lambda.Unchecked;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import victor.training.oo.stuff.ThreadUtils;

@EnableAsync // SOLUTION
@SpringBootApplication
public class solution {
	public static void main(String[] args) {
		SpringApplication.run(solution.class, args).close(); // Note: .close to stop executors after CLRunner finishes
	}

	@Bean
	public ThreadPoolTaskExecutor executor() {
		ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
		executor.setCorePoolSize(1);
		executor.setMaxPoolSize(1);
		executor.setQueueCapacity(500);
		executor.setThreadNamePrefix("barman-");
		executor.initialize();
		executor.setWaitForTasksToCompleteOnShutdown(true);
		return executor;
	}

}

@Slf4j
@Component
class Drinker implements CommandLineRunner {
	@Autowired
	private Barman barman;
	
	// INITIAL (
//	public void run(String... args) throws Exception {
//		log.debug("Submitting my order");
//		Ale ale = barman.getOneAle();
//		Wiskey whiskey = barman.getOneWiskey();
//		log.debug("Got my order! Thank you lad! " + Arrays.asList(ale, whiskey));
//	}
	// INITIAL )

	// SOLUTION (
	// 1 - directly using Executor
//	@Autowired
//	private ThreadPoolTaskExecutor executor;
//
//	public void run(String... args) throws Exception {
//		log.debug("Submitting my order");
//		Future<Ale> aleOrder = executor.submit(() -> barman.getOneAle());
//		Future<Wiskey> wiskeyOrder = executor.submit(() -> barman.getOneWiskey());
//		log.debug("Waiting for my order");
//
//		Ale ale = aleOrder.get();
//		Wiskey whiskey = wiskeyOrder.get();
//		log.debug("Got my order! Thank you lad! " + Arrays.asList(ale, whiskey));
//	}
	
	
	public void run(String... args) throws Exception {
		log.debug("Submitting my order");
		CompletableFuture<Ale> aleOrder = barman.getOneAle();
		CompletableFuture<Wiskey> wiskeyOrder = barman.getOneWiskey();

		log.debug("Waiting for my order");

		CompletableFuture.allOf(aleOrder, wiskeyOrder)
				.thenRun(Unchecked.runnable(() -> {
					log.debug("Got my order! Thank you lad! " + Arrays.asList(aleOrder.get(), wiskeyOrder.get()));
				}));
		log.debug("Exit method");
	}
	// SOLUTION )
}

@Slf4j
@Service
class Barman {
	// INITIAL (
//	public Ale getOneAle() {
//		 log.debug("Pouring Ale...");
//		 ThreadUtils.sleep(1000);
//		 return new Ale();
//	 }
//	
//	 public Wiskey getOneWiskey() {
//		 log.debug("Pouring Wiskey...");
//		 ThreadUtils.sleep(1000);
//		 return new Wiskey();
//	 }
	// INITIAL )
	
	// SOLUTION (
	@Async
	public CompletableFuture<Ale> getOneAle() {
		log.debug("Pouring Ale...");
		ThreadUtils.sleep(1000);
		return CompletableFuture.completedFuture(new Ale());
	}

	@Async
	public CompletableFuture<Wiskey> getOneWiskey() {
		log.debug("Pouring Wiskey...");
		ThreadUtils.sleep(1000);
		return CompletableFuture.completedFuture(new Wiskey());
	}
	// SOLUTION )
}

@Data
class Ale {
}

@Data
class Wiskey {
}
